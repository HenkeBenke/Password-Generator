/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mainpasswordgenerator;

import java.util.Random;


/**
 *
 * @author aa97339
 */
public class BasicGUI extends javax.swing.JFrame {

    /**
     * Creates new form BasicGUI
     */
    public BasicGUI() {
        initComponents();
        questionPanel.setVisible(false);
        /*for (int i = 0; i < questionPanel.getComponentCount(); i++) {
            questionPanel.getComponent(i).setVisible(false);
        }*/
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        questionPanel = new javax.swing.JPanel();
        submitAnswerButt = new javax.swing.JButton();
        forenameField = new javax.swing.JTextField();
        questionLbl = new javax.swing.JLabel();
        cancelBut = new javax.swing.JButton();
        newQuestionBut = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lengthPicker = new javax.swing.JSlider();
        variedEncryptionCheckBox = new javax.swing.JCheckBox();
        qwertyCheck = new javax.swing.JCheckBox();
        submit = new javax.swing.JButton();
        flexibleLengthCheckBox = new javax.swing.JCheckBox();
        minLengthSlider = new javax.swing.JSlider();
        jLabel3 = new javax.swing.JLabel();
        maxLengthSlider = new javax.swing.JSlider();
        jLabel4 = new javax.swing.JLabel();
        showPassword = new javax.swing.JButton();
        choosePasswordCombo = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        textAreaShowPassword = new javax.swing.JTextArea();
        encryptAgainBut = new javax.swing.JButton();
        makeLongerBut = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        questionPanel.setMinimumSize(new java.awt.Dimension(271, 89));

        submitAnswerButt.setText("Ok");
        submitAnswerButt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitAnswerButtActionPerformed(evt);
            }
        });

        questionLbl.setText("Place holder");

        cancelBut.setText("Cancel");
        cancelBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButActionPerformed(evt);
            }
        });

        newQuestionBut.setText("New question");
        newQuestionBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newQuestionButActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout questionPanelLayout = new javax.swing.GroupLayout(questionPanel);
        questionPanel.setLayout(questionPanelLayout);
        questionPanelLayout.setHorizontalGroup(
            questionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(questionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(questionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(forenameField, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(questionPanelLayout.createSequentialGroup()
                        .addComponent(questionLbl)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(questionPanelLayout.createSequentialGroup()
                        .addComponent(submitAnswerButt)
                        .addGap(26, 26, 26)
                        .addComponent(newQuestionBut)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                        .addComponent(cancelBut)))
                .addContainerGap())
        );
        questionPanelLayout.setVerticalGroup(
            questionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, questionPanelLayout.createSequentialGroup()
                .addGap(0, 15, Short.MAX_VALUE)
                .addComponent(questionLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(forenameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(questionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(submitAnswerButt)
                    .addComponent(cancelBut)
                    .addComponent(newQuestionBut)))
        );

        jLabel1.setText("Length:");

        lengthPicker.setMajorTickSpacing(5);
        lengthPicker.setMaximum(30);
        lengthPicker.setMinimum(5);
        lengthPicker.setMinorTickSpacing(1);
        lengthPicker.setPaintLabels(true);
        lengthPicker.setPaintTicks(true);
        lengthPicker.setToolTipText("");
        lengthPicker.setValue(10);

        variedEncryptionCheckBox.setText("Vary encryption methods");
        variedEncryptionCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                variedEncryptionCheckBoxActionPerformed(evt);
            }
        });

        qwertyCheck.setSelected(true);
        qwertyCheck.setText("QWERTY layout keyboard");

        submit.setLabel("Ok");
        submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitActionPerformed(evt);
            }
        });

        flexibleLengthCheckBox.setText("Flexible length");
        flexibleLengthCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flexibleLengthCheckBoxActionPerformed(evt);
            }
        });

        minLengthSlider.setMajorTickSpacing(5);
        minLengthSlider.setMaximum(30);
        minLengthSlider.setMinimum(5);
        minLengthSlider.setMinorTickSpacing(1);
        minLengthSlider.setPaintLabels(true);
        minLengthSlider.setPaintTicks(true);
        minLengthSlider.setValue(5);
        minLengthSlider.setEnabled(false);
        minLengthSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                minLengthSliderMouseReleased(evt);
            }
        });

        jLabel3.setText("Min");

        maxLengthSlider.setMajorTickSpacing(5);
        maxLengthSlider.setMaximum(30);
        maxLengthSlider.setMinimum(5);
        maxLengthSlider.setMinorTickSpacing(1);
        maxLengthSlider.setPaintLabels(true);
        maxLengthSlider.setPaintTicks(true);
        maxLengthSlider.setEnabled(false);
        maxLengthSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                maxLengthSliderMouseReleased(evt);
            }
        });

        jLabel4.setText("Max");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(submit)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(jLabel4)))
                                .addGap(10, 10, 10))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(flexibleLengthCheckBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addComponent(maxLengthSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lengthPicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel3))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(variedEncryptionCheckBox)
                                .addGap(18, 18, 18)
                                .addComponent(qwertyCheck)
                                .addGap(0, 186, Short.MAX_VALUE)))
                        .addGap(10, 10, 10)
                        .addComponent(minLengthSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(35, 35, 35))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addComponent(minLengthSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lengthPicker, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(29, 29, 29)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(variedEncryptionCheckBox)
                                    .addComponent(qwertyCheck))))
                        .addComponent(flexibleLengthCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(submit))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(maxLengthSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        showPassword.setText("Print password");
        showPassword.setEnabled(false);
        showPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showPasswordActionPerformed(evt);
            }
        });

        textAreaShowPassword.setEditable(false);
        textAreaShowPassword.setColumns(20);
        textAreaShowPassword.setRows(5);
        textAreaShowPassword.setText("Passwords can be displayed here");
        textAreaShowPassword.setToolTipText("");
        jScrollPane1.setViewportView(textAreaShowPassword);

        encryptAgainBut.setText("Encrypt password again");
        encryptAgainBut.setEnabled(false);
        encryptAgainBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encryptAgainButActionPerformed(evt);
            }
        });

        makeLongerBut.setText("Make password longer");
        makeLongerBut.setEnabled(false);
        makeLongerBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                makeLongerButActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(questionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(79, 79, 79)
                        .addComponent(showPassword)
                        .addGap(40, 40, 40)
                        .addComponent(choosePasswordCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(encryptAgainBut)
                            .addComponent(makeLongerBut))
                        .addGap(22, 22, 22))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 81, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(showPassword)
                                    .addComponent(choosePasswordCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(questionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(encryptAgainBut)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(makeLongerBut)
                        .addGap(6, 6, 6)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void submitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitActionPerformed
        if (lengthPicker.isEnabled()) {
            Password pass = new Password(lengthPicker.getValue());
            MainPasswordGenerator.listOfPasswords.add(MainPasswordGenerator.listOfPasswords.size(), pass);
        }
        else {
            Password pass = new Password(minLengthSlider.getValue(), maxLengthSlider.getValue());
            MainPasswordGenerator.listOfPasswords.add(MainPasswordGenerator.listOfPasswords.size(), pass);
        }
        UserInput usIn = new UserInput(qwertyCheck.isSelected(), variedEncryptionCheckBox.isSelected());
        MainPasswordGenerator.listOfInputs.add(MainPasswordGenerator.listOfInputs.size(), usIn);
        submit.setEnabled(false);
        showPassword.setEnabled(false);
        encryptAgainBut.setEnabled(false);
        makeLongerBut.setEnabled(false);
        MainPasswordGenerator.encrypt.methodPicker(usIn, MainPasswordGenerator.listOfPasswords.get(MainPasswordGenerator.listOfPasswords.size()-1), questionLbl);
        questionPanel.setVisible(true);
        /*for (int i = 0; i < questionPanel.getComponentCount(); i++) { //Attempt to not make other elements move when toggling visibility, see also the constructor (also to be added in encryptor if to be used)
            questionPanel.getComponent(i).setVisible(true);
        }*/
    }//GEN-LAST:event_submitActionPerformed

    private void showPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showPasswordActionPerformed
        /*for (int i = 0; i < MainPasswordGenerator.listOfPasswords.size(); i++) { //Remove later
            System.out.println(MainPasswordGenerator.listOfPasswords.get(i).passwordText);
        }*/
        int passNr = choosePasswordCombo.getSelectedIndex();
        Password pass = MainPasswordGenerator.listOfPasswords.get(passNr);
        textAreaShowPassword.setText("The password is: " + pass.getPasswordText() + "\nwith the following being the memory methods:\n");
        for (int i = 0; i < pass.getAmountOfMemoryMethods(); i++) {
            textAreaShowPassword.append(pass.getMemoryMethod(i)+"\n");
        }
    }//GEN-LAST:event_showPasswordActionPerformed

    private void variedEncryptionCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_variedEncryptionCheckBoxActionPerformed
        //Change to complexity instead?
    }//GEN-LAST:event_variedEncryptionCheckBoxActionPerformed
                                                                                //Make it so only one type of length picking is enabled at a time
    private void flexibleLengthCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flexibleLengthCheckBoxActionPerformed
        if (flexibleLengthCheckBox.isSelected()) {
            lengthPicker.setEnabled(false);
            minLengthSlider.setEnabled(true);
            maxLengthSlider.setEnabled(true);
        }
        else {
            lengthPicker.setEnabled(true);
            minLengthSlider.setEnabled(false);
            maxLengthSlider.setEnabled(false);
        }
    }//GEN-LAST:event_flexibleLengthCheckBoxActionPerformed

    private void minLengthSliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minLengthSliderMouseReleased
        maxLengthSlider.setMinimum(minLengthSlider.getValue());
    }//GEN-LAST:event_minLengthSliderMouseReleased

    private void maxLengthSliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_maxLengthSliderMouseReleased
        minLengthSlider.setMaximum(maxLengthSlider.getValue());
    }//GEN-LAST:event_maxLengthSliderMouseReleased

    private void submitAnswerButtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitAnswerButtActionPerformed
        if (forenameField.getText().length()==0) {  //Make changes later
            System.out.println("No answer recieved");
            return;
        }
        else if (false) { //Add code for encrypt again compatability
            
        }
        UserInput usIn = MainPasswordGenerator.listOfInputs.get(MainPasswordGenerator.listOfInputs.size()-1);
        usIn.setFirstText(forenameField.getText());
        Password pass = MainPasswordGenerator.listOfPasswords.get(MainPasswordGenerator.listOfPasswords.size()-1);
        if (MainPasswordGenerator.encrypt.usingShortQuestions) {
            MainPasswordGenerator.encrypt.chooseShortQuestionMethod(pass, usIn, questionLbl, choosePasswordCombo, questionPanel, submit, showPassword, encryptAgainBut, makeLongerBut);
        }
        else {
            MainPasswordGenerator.encrypt.makePassword(usIn, pass, questionLbl, choosePasswordCombo, questionPanel, submit, showPassword, encryptAgainBut, makeLongerBut);
        }
    }//GEN-LAST:event_submitAnswerButtActionPerformed

    private void cancelButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButActionPerformed
        questionPanel.setVisible(false);
        submit.setEnabled(true);
        showPassword.setEnabled(true);
        encryptAgainBut.setEnabled(true);
        makeLongerBut.setEnabled(true);
        MainPasswordGenerator.listOfInputs.remove(MainPasswordGenerator.listOfInputs.size()-1);
        MainPasswordGenerator.listOfPasswords.remove(MainPasswordGenerator.listOfPasswords.size()-1);
        if (MainPasswordGenerator.listOfPasswords.isEmpty()) {
                showPassword.setEnabled(false);
                encryptAgainBut.setEnabled(false);
                makeLongerBut.setEnabled(false);
            }
    }//GEN-LAST:event_cancelButActionPerformed
    Random random = new Random ();
    private void newQuestionButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newQuestionButActionPerformed
        int questionNr;
        Password pass = MainPasswordGenerator.listOfPasswords.get(MainPasswordGenerator.listOfPasswords.size()-1);
        pass.addSkippedSingleNoun(pass.removeLastUsedNoun());
        boolean used;
        if ((QuestionCollection.singleNounBased.length-(pass.getAmountOfSingleNounQuestionsUsed()+pass.getSkippedSingleNounAmount())==0)) {
            pass.clearSkippedSingleNoun();
        }
        else if ((QuestionCollection.singleNounBased.length-(pass.getAmountOfSingleNounQuestionsUsed()+pass.getSkippedSingleNounAmount())<0)) {
            System.out.println("How are more questions used than there are available?(This print is from around line 400 in basicgui)");
        }
        int laps = 0;  //Trying  to prevent infinite loop, can probably remove later when sure it works
        while (true) {
            laps++;  //Temp
            questionNr = random.nextInt(QuestionCollection.singleNounBased.length);
            used = false;
            for (int i = 0; i < pass.getAmountOfSingleNounQuestionsUsed(); i++) {
                if (questionNr==pass.getSingleNounQuestionUsed(i)) {
                    used = true;
                }
            }
            if (!used) {
                for (int i = 0; i < pass.getSkippedSingleNounAmount(); i++) {
                    if (questionNr==pass.getSkippedSingleNoun(i)) {
                    used = true;
                    }
                }
            }
            if (laps>1000) {  //Temp
                System.out.println("Infinite loop from skip question?");
                break;
            }
            if (used) {
                continue;
            }
            break;
        }
        questionLbl.setText(QuestionCollection.singleNounBased[questionNr]);
        pass.addSingleNounUsed(questionNr);
    }//GEN-LAST:event_newQuestionButActionPerformed

    private void encryptAgainButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encryptAgainButActionPerformed
        int passNr = choosePasswordCombo.getSelectedIndex();
        MainPasswordGenerator.encrypt.encryptAgain(passNr, choosePasswordCombo);
    }//GEN-LAST:event_encryptAgainButActionPerformed
    //Make it so you choose have many chars longer you want it
    private void makeLongerButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_makeLongerButActionPerformed
        int passNr = choosePasswordCombo.getSelectedIndex();
        int max = 30; //Make user choose-able
        int interval = 5; //Make user choose-able or remove
        Password pass = new Password(MainPasswordGenerator.listOfPasswords.get(passNr));
        MainPasswordGenerator.listOfPasswords.add(MainPasswordGenerator.listOfPasswords.size(), pass);
        pass.makeLonger(max, interval);
        UserInput usIn = new UserInput(MainPasswordGenerator.listOfInputs.get(passNr));
        MainPasswordGenerator.listOfInputs.add(MainPasswordGenerator.listOfInputs.size(), usIn);
        submit.setEnabled(false);
        showPassword.setEnabled(false);
        encryptAgainBut.setEnabled(false);
        makeLongerBut.setEnabled(false);
        MainPasswordGenerator.encrypt.methodPicker(usIn, pass, questionLbl);
        questionPanel.setVisible(true);
    }//GEN-LAST:event_makeLongerButActionPerformed

    
    /**
     * @param args the command line arguments
     */
   // public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
     /*   try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BasicGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BasicGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BasicGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BasicGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }*/
        //</editor-fold>

        /* Create and display the form */
       // java.awt.EventQueue.invokeLater(new Runnable() {
            //public void run() {
          //      new BasicGUI().setVisible(true);
        //    }
      //  });
  //  }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelBut;
    private javax.swing.JComboBox choosePasswordCombo;
    private javax.swing.JButton encryptAgainBut;
    private javax.swing.JCheckBox flexibleLengthCheckBox;
    private javax.swing.JTextField forenameField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSlider lengthPicker;
    private javax.swing.JButton makeLongerBut;
    private javax.swing.JSlider maxLengthSlider;
    private javax.swing.JSlider minLengthSlider;
    private javax.swing.JButton newQuestionBut;
    private javax.swing.JLabel questionLbl;
    private javax.swing.JPanel questionPanel;
    private javax.swing.JCheckBox qwertyCheck;
    private javax.swing.JButton showPassword;
    private javax.swing.JButton submit;
    private javax.swing.JButton submitAnswerButt;
    private javax.swing.JTextArea textAreaShowPassword;
    private javax.swing.JCheckBox variedEncryptionCheckBox;
    // End of variables declaration//GEN-END:variables
   }
